#!/bin/bash

## Install necessary packages for pyenv
# https://github.com/pyenv/pyenv/wiki#suggested-build-environment
/bin/sudo /bin/apt update
/bin/sudo /bin/apt install build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev curl \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
    git openssh-server

## Install pyenv
/bin/curl https://pyenv.run | /bin/bash

## Setup shell
# https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv

# shellcheck disable=SC2016
/bin/grep 'export PYENV_ROOT="$HOME/.pyenv"' "$HOME"/.bashrc || {
    /bin/echo 'export PYENV_ROOT="$HOME/.pyenv"' >>"$HOME"/.bashrc
}

# shellcheck disable=SC2016
/bin/grep \
    'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' "$HOME"/.bashrc || {
    /bin/echo \
        'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >>"$HOME"/.bashrc
}

# shellcheck disable=SC2016
/bin/grep 'eval "$(pyenv init -)"' "$HOME"/.bashrc || {
    /bin/echo 'eval "$(pyenv init -)"' >>"$HOME"/.bashrc
}

# shellcheck disable=SC2016
/bin/grep 'export PYENV_ROOT="$HOME/.pyenv"' "$HOME"/.profile || {
    /bin/echo 'export PYENV_ROOT="$HOME/.pyenv"' >>"$HOME"/.profile
}

# shellcheck disable=SC2016
/bin/grep \
    'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' "$HOME"/.profile || {
    /bin/echo \
        'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >>"$HOME"/.profile
}

# shellcheck disable=SC2016
/bin/grep 'eval "$(pyenv init -)"' "$HOME"/.profile || {
    /bin/echo 'eval "$(pyenv init -)"' >>"$HOME"/.profile
}

## Adopt changes
source "$HOME"/.bashrc

## Set global python version
read -r -p "Enter the desired minor python version, eg 3.12: " global_python_version

"${HOME}"/.pyenv/bin/pyenv install "$global_python_version" || exit 1
"${HOME}"/.pyenv/bin/pyenv global "$global_python_version" || exit 1

echo "* Check if id_rsa public key exists"
[ -f "$HOME"/.ssh/id_rsa.pub ] || ssh-keygen -b 4096

echo "* Create authorized_keys if it does not exist"
touch "$HOME"/.ssh/authorized_keys
chmod 600 "$HOME"/.ssh/authorized_keys

echo "* Check if public key is in authorized_keys"
pk=$(cat "$HOME"/.ssh/id_rsa.pub)
grep -Fxq "$pk" "$HOME"/.ssh/authorized_keys || echo "$pk" >>"$HOME"/.ssh/authorized_keys

echo "* PUBLIC KEY:"
echo ""
echo "$pk"
echo ""
echo "**************"
